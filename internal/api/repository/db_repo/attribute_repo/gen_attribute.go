///////////////////////////////////////////////////////////
// THIS FILE IS AUTO GENERATED by gormgen, DON'T EDIT IT //
//        ANY CHANGES DONE HERE WILL BE LOST             //
///////////////////////////////////////////////////////////

package attribute_repo

import (
	"fmt"
	"time"

	"github.com/xinliangnote/go-gin-api/internal/api/repository/db_repo"

	"github.com/pkg/errors"
	"gorm.io/gorm"
)

func NewModel() *Attribute {
	return new(Attribute)
}

func NewQueryBuilder() *attributeRepoQueryBuilder {
	return new(attributeRepoQueryBuilder)
}

func (t *Attribute) Create(db *gorm.DB) (id int32, err error) {
	if err = db.Create(t).Error; err != nil {
		return 0, errors.Wrap(err, "create err")
	}
	return t.Id, nil
}

func (t *Attribute) Delete(db *gorm.DB) (err error) {
	if err = db.Delete(t).Error; err != nil {
		return errors.Wrap(err, "delete err")
	}
	return nil
}

func (t *Attribute) Updates(db *gorm.DB, m map[string]interface{}) (err error) {
	if err = db.Model(&Attribute{}).Where("id = ?", t.Id).Updates(m).Error; err != nil {
		return errors.Wrap(err, "updates err")
	}
	return nil
}

type attributeRepoQueryBuilder struct {
	order []string
	where []struct {
		prefix string
		value  interface{}
	}
	limit  int
	offset int
}

func (qb *attributeRepoQueryBuilder) buildQuery(db *gorm.DB) *gorm.DB {
	ret := db
	for _, where := range qb.where {
		ret = ret.Where(where.prefix, where.value)
	}
	for _, order := range qb.order {
		ret = ret.Order(order)
	}
	ret = ret.Limit(qb.limit).Offset(qb.offset)
	return ret
}

func (qb *attributeRepoQueryBuilder) Count(db *gorm.DB) (int64, error) {
	var c int64
	res := qb.buildQuery(db).Model(&Attribute{}).Count(&c)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		c = 0
	}
	return c, res.Error
}

func (qb *attributeRepoQueryBuilder) First(db *gorm.DB) (*Attribute, error) {
	ret := &Attribute{}
	res := qb.buildQuery(db).First(ret)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		ret = nil
	}
	return ret, res.Error
}

func (qb *attributeRepoQueryBuilder) QueryOne(db *gorm.DB) (*Attribute, error) {
	qb.limit = 1
	ret, err := qb.QueryAll(db)
	if len(ret) > 0 {
		return ret[0], err
	}
	return nil, err
}

func (qb *attributeRepoQueryBuilder) QueryAll(db *gorm.DB) ([]*Attribute, error) {
	var ret []*Attribute
	err := qb.buildQuery(db).Find(&ret).Error
	return ret, err
}

func (qb *attributeRepoQueryBuilder) Limit(limit int) *attributeRepoQueryBuilder {
	qb.limit = limit
	return qb
}

func (qb *attributeRepoQueryBuilder) Offset(offset int) *attributeRepoQueryBuilder {
	qb.offset = offset
	return qb
}

func (qb *attributeRepoQueryBuilder) WhereId(p db_repo.Predicate, value int64) *attributeRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", p),
		value,
	})
	return qb
}

func (qb *attributeRepoQueryBuilder) WhereIdIn(value []int64) *attributeRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "IN"),
		value,
	})
	return qb
}

func (qb *attributeRepoQueryBuilder) WhereIdNotIn(value []int64) *attributeRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *attributeRepoQueryBuilder) OrderById(asc bool) *attributeRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "id "+order)
	return qb
}

func (qb *attributeRepoQueryBuilder) WhereSpuId(p db_repo.Predicate, value string) *attributeRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "spu_id", p),
		value,
	})
	return qb
}

func (qb *attributeRepoQueryBuilder) WhereSpuIdIn(value []string) *attributeRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "spu_id", "IN"),
		value,
	})
	return qb
}

func (qb *attributeRepoQueryBuilder) WhereSpuIdNotIn(value []string) *attributeRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "spu_id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *attributeRepoQueryBuilder) OrderBySpuId(asc bool) *attributeRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "spu_id "+order)
	return qb
}

func (qb *attributeRepoQueryBuilder) WhereOptName(p db_repo.Predicate, value string) *attributeRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "opt_name", p),
		value,
	})
	return qb
}

func (qb *attributeRepoQueryBuilder) WhereOptNameIn(value []string) *attributeRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "opt_name", "IN"),
		value,
	})
	return qb
}

func (qb *attributeRepoQueryBuilder) WhereOptNameNotIn(value []string) *attributeRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "opt_name", "NOT IN"),
		value,
	})
	return qb
}

func (qb *attributeRepoQueryBuilder) OrderByOptName(asc bool) *attributeRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "opt_name "+order)
	return qb
}

func (qb *attributeRepoQueryBuilder) WhereImg(p db_repo.Predicate, value string) *attributeRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "img", p),
		value,
	})
	return qb
}

func (qb *attributeRepoQueryBuilder) WhereImgIn(value []string) *attributeRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "img", "IN"),
		value,
	})
	return qb
}

func (qb *attributeRepoQueryBuilder) WhereImgNotIn(value []string) *attributeRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "img", "NOT IN"),
		value,
	})
	return qb
}

func (qb *attributeRepoQueryBuilder) OrderByImg(asc bool) *attributeRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "img "+order)
	return qb
}

func (qb *attributeRepoQueryBuilder) WhereValue(p db_repo.Predicate, value string) *attributeRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "value", p),
		value,
	})
	return qb
}

func (qb *attributeRepoQueryBuilder) WhereValueIn(value []string) *attributeRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "value", "IN"),
		value,
	})
	return qb
}

func (qb *attributeRepoQueryBuilder) WhereValueNotIn(value []string) *attributeRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "value", "NOT IN"),
		value,
	})
	return qb
}

func (qb *attributeRepoQueryBuilder) OrderByValue(asc bool) *attributeRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "value "+order)
	return qb
}

func (qb *attributeRepoQueryBuilder) WhereStatus(p db_repo.Predicate, value int32) *attributeRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "status", p),
		value,
	})
	return qb
}

func (qb *attributeRepoQueryBuilder) WhereStatusIn(value []int32) *attributeRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "status", "IN"),
		value,
	})
	return qb
}

func (qb *attributeRepoQueryBuilder) WhereStatusNotIn(value []int32) *attributeRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "status", "NOT IN"),
		value,
	})
	return qb
}

func (qb *attributeRepoQueryBuilder) OrderByStatus(asc bool) *attributeRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "status "+order)
	return qb
}

func (qb *attributeRepoQueryBuilder) WhereCreatedAt(p db_repo.Predicate, value time.Time) *attributeRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", p),
		value,
	})
	return qb
}

func (qb *attributeRepoQueryBuilder) WhereCreatedAtIn(value []time.Time) *attributeRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", "IN"),
		value,
	})
	return qb
}

func (qb *attributeRepoQueryBuilder) WhereCreatedAtNotIn(value []time.Time) *attributeRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", "NOT IN"),
		value,
	})
	return qb
}

func (qb *attributeRepoQueryBuilder) OrderByCreatedAt(asc bool) *attributeRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "created_at "+order)
	return qb
}

func (qb *attributeRepoQueryBuilder) WhereUpdatedAt(p db_repo.Predicate, value time.Time) *attributeRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", p),
		value,
	})
	return qb
}

func (qb *attributeRepoQueryBuilder) WhereUpdatedAtIn(value []time.Time) *attributeRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", "IN"),
		value,
	})
	return qb
}

func (qb *attributeRepoQueryBuilder) WhereUpdatedAtNotIn(value []time.Time) *attributeRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", "NOT IN"),
		value,
	})
	return qb
}

func (qb *attributeRepoQueryBuilder) OrderByUpdatedAt(asc bool) *attributeRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "updated_at "+order)
	return qb
}
